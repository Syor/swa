openapi: 3.0.0
info:
  version: 1.0.0
  title: Petr API
  description: API for Petr's application

servers:
  - url: https://localhost:8080

paths:
  /books:
    get:
      description: Gets a list of all books in the system.
      parameters:
        - in: query
          name: page
          description: Number of page to retrieve
          schema:
            type: integer
        - in: query
          name: pageSize
          description: Size o returned page
          schema:
            type: integer
        - in: query
          name: title
          description: Title of the book to search for
          schema:
            type: string
      responses:
        200:
          description: When list of books was successfully retrieved.
          content:
            application:json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                    description: Number of page returned
                  pageSize:
                    type: integer
                    description: Size of returned page
                  totalPages:
                    type: integer
                    description: Total number of pages
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'

    put:
      description: Adds a new book to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
      responses:
        201:
          description: When the book was added
          content:
            application/json:
              schema:
                type: integer
                description: ID of the newly inserted book
        400:
          description: When data are not valid
          content:
            application/json:
              schema:
                type: string
                description: Error message

  /books/{book-id}:
    get:
      description: Gets information about book with given ID
      parameters:
        - in: path
          required: true
          name: book-id
          description: ID of the book  to get information of
          schema:
            type: integer
      responses:
        200:
          description: Details of book were retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        404:
          description: Book with given ID does not exist

    post:
      description: Modifies book with given ID
      parameters:
        - in: path
          required: true
          name: book-id
          description: ID of the book to modify
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/NewBook"
      responses:
        200:
          description: Book with given ID was modified
        400:
          description: Book data are not valid
        404:
          description: Book with given ID was not found

    delete:
      description: Deletes book with given ID
      parameters:
        - in: path
          required: true
          name: book-id
          schema:
            type: integer
      responses:
        200:
          description: Book with given ID was successfully deleted
        404:
          description: Book with given ID was not found.

  /authors:
    get:
      description: Gets a list of all authors in the system.
      parameters:
        - in: query
          name: page
          description: Number of page to retrieve
          schema:
            type: integer
        - in: query
          name: pageSize
          description: Size o returned page
          schema:
            type: integer
      responses:
        200:
          description: When list of authors was successfully retrieved.
          content:
            application:json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                    description: Number of page returned
                  pageSize:
                    type: integer
                    description: Size of returned page
                  totalPages:
                    type: integer
                    description: Total number of pages
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Author'

    put:
      description: Adds a new author to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAuthor'
      responses:
        201:
          description: When the author was added
          content:
            application/json:
              schema:
                type: integer
                description: ID of the newly inserted author
        400:
          description: When data are not valid
          content:
            application/json:
              schema:
                type: string
                description: Error message

  /authors/{author-id}:
    get:
      description: Gets information about author with given ID
      parameters:
        - in: path
          required: true
          name: author-id
          description: ID of the author to get information of
          schema:
            type: integer
      responses:
        200:
          description: Details of author were retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        404:
          description: Author with given ID does not exist

    post:
      description: Modifies author with given ID
      parameters:
        - in: path
          required: true
          name: author-id
          description: ID of the author to modify
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/NewAuthor"
      responses:
        200:
          description: Author with given ID was modified
        400:
          description: Author data are not valid
        404:
          description: Author with given ID was not found

    delete:
      description: Deletes author with given ID
      parameters:
        - in: path
          required: true
          name: author-id
          schema:
            type: integer
      responses:
        200:
          description: Author with given ID was successfully deleted
        404:
          description: Author with given ID was not found.

  /authors/{author-id}/books:
    get:
      description: Gets all books written by author with given ID
      parameters:
        - in: path
          required: true
          name: author-id
          description: ID of the author to get books of
          schema:
            type: integer
        - in: query
          name: page
          description: Number of page to retrieve
          schema:
            type: integer
        - in: query
          name: pageSize
          description: Size o returned page
          schema:
            type: integer
      responses:
        200:
          description: When list of books was successfully retrieved.
          content:
            application:json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                    description: Number of page returned
                  pageSize:
                    type: integer
                    description: Size of returned page
                  totalPages:
                    type: integer
                    description: Total number of pages
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        404:
          description: Author with given ID was not found

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        isbn:
          type: string
        published:
          type: string
        language:
          type: string
        genre:
          type: string
        author:
          type: object
          $ref: '#/components/schemas/Author'

    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        surname:
          type: string
        birth:
          type: string

    NewBook:
      type: object
      properties:
        title:
          type: string
        isbn:
          type: string
        published:
          type: string
        language:
          type: string
        genre:
          type: string
        author:
          type: integer

    NewAuthor:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        birth:
          type: string